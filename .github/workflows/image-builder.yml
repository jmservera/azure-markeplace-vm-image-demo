# This is a basic workflow to help you get started with Actions

name: CD

# Controls when the action will run. 
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment name'
        required: true
        default: 'jm-azure'
      resourceGroup:
        description: 'Resource group name'
        required: true
        default: 'marketplace-poc03'
      managedIdentity:
        description: 'Managed Identity for creating the vm images'
        required: true
        default: 'aibBuiUserId1616749594'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ github.event.inputs.environment }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Create Workflow Artifacts
        run: |
          cd  ${{ GITHUB.WORKSPACE }}
          mkdir workflow-artifacts/        
          cp ${{ GITHUB.WORKSPACE }}/vmcode/install.sh ${{ GITHUB.WORKSPACE }}/workflow-artifacts/install.sh
          
      - name: Azure Login
        uses: Azure/login@v1.1
        with:
          # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          creds:  ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check az providers and feature registration
        uses: azure/CLI@1.0.4
        if: ${{ false }}
        with:
          azcliversion: latest
          inlineScript: |
            #constants
            BLUE='\033[1;34m'
            RED='\033[1;31m'
            NC='\033[0m'
            errorState=0

            # Check provider list
            providers=("Microsoft.VirtualMachineImages" "Microsoft.KeyVault" "Microsoft.Compute" "Microsoft.Storage" "Microsoft.Network")
            for provider in ${providers[@]}; do
              state=$(az provider show --namespace ${provider} -o tsv --query registrationState)
              if [ $state != 'Registered' ]; then
                      echo -e "::error::Account not registered for provider ${provider}\nPlease run this in your account:\n\t${BLUE}az provider register --namespace ${provider}${NC}"
                      errorState=1
              else
                      echo "::debug::Provider ${provider} registered!"
              fi
            done

            #check vm template feature (needed because it's still in preview)

            state=$(az feature show --namespace Microsoft.VirtualMachineImages --name VirtualMachineTemplatePreview -o tsv --query properties.state)
            if [ $state != 'Registered' ]; then
                    echo -e "::error::Account not registered for VirtualMachineTemplatePreview\nPlease run this in your account:\n\t${BLUE}az feature register --namespace Microsoft.VirtualMachineImages --name VirtualMachineTemplatePreview${NC}"
                    errorState=1
            else
                    echo "::debug::Feature registered!"
            fi

            exit $errorState

      - name: BUILD-CUSTOM-VM-IMAGE
        uses: azure/build-vm-image@v0
        with:        
          resource-group-name: '${{ github.event.inputs.resourceGroup }}'
          managed-identity: '${{ github.event.inputs.managedIdentity }}'
          location: 'northeurope'
          source-os-type: 'linux'        
          source-image: Canonical:UbuntuServer:18.04-LTS:latest        
          customizer-script: ./install.sh

            
